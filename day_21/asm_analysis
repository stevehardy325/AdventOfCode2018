#ip 4
 0	seti 123 0 1		reg[1] = 123							while (123 & 456 != 72) {
 1	bani 1 456 1		reg[1] = reg[1] & 456
 2 	eqri 1 72 1		reg[1] = reg[1] == 72
 3 	addr 1 4 4		reg[4] = reg[1] + reg[4]	: jump to 5
 4 	seti 0 0 4		reg[4] = 0			: jump to 0			}
 
 
 
 5 	seti 0 3 1		reg[1] = 0							reg[1] = 0																						

												do {
 6 	bori 1 65536 5		reg[5] = reg[1] | 65536							reg[5] = reg[1] | 65536
 7 	seti 8586263 3 1	reg[1] = 8586263							reg[1] = 8586263

													do {
 8 	bani 5 255 2		reg[2] = reg[5] & 255	
 9 	addr 1 2 1		reg[1] += reg[2]								reg[1] += reg[5] & 255
 
10 	bani 1 16777215 1	reg[1] = reg[1] & 16777215							reg[1] = reg[1] & 16777215
11 	muli 1 65899 1		reg[1] = reg[1] * 65899								reg[1] = reg[1] * 65899
12 	bani 1 16777215 1	reg[1] = reg[1] & 16777215							reg[1] = reg[1] & 16777215	

13 	gtir 256 5 2		reg[2] = 256 > reg[5]								if 256 > reg[5] {
14 	addr 2 4 4		reg[4] = reg[2] + reg[4]	: jump to 28 if 256>reg[5]				break
15 	addi 4 1 4		reg[4] += 1			: else jump to 17				}
16 	seti 27 8 4		reg[4] = 27			: jump to 28
														reg[3] = 0
17 	seti 0 1 2		reg[2] = 0									for (reg[2] = 0; reg[3] <= reg[5]; reg[2]++ {
18 	addi 2 1 3      	reg[3] = reg[2] +1									reg[3] = (reg[2] + 1) * 256
19 	muli 3 256 3		reg[3] *= 256									}
20 	gtrr 3 5 3		reg[3] = reg[3] > reg[5]														
21 	addr 3 4 4		reg[4] += reg[3]		:jump to 23 if reg[3] > reg[5]				
22 	addi 4 1 4		reg[4] += 1			:jump to 24									
23 	seti 25 8 4		reg[4] = 25			:jump to 26									
24 	addi 2 1 2		reg[2] += 1																			
25 	seti 17 7 4		reg[4] = 17			:jump to 18								

26 	setr 2 0 5		reg[5] = reg[2]									reg[5] = reg[2]

27 	seti 7 8 4		reg[4] = 7			:jump to 8				} while (true)

28 	eqrr 1 0 2		reg[2] = reg[1] == reg[0]					} while (reg[0] != reg[1])
29 	addr 2 4 4		reg[4] += reg[2]		: jump to 31 -- HALT
30 	seti 5 4 4		reg[4] = 5			: jump to 6
